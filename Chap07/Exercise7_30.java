package Text.Chap07;

import java.util.Scanner;

public class Exercise7_30 {
  // 二つの整数の最小値を求めるためのメソッド。これにより、二つの整数の比較が容易になる。
  static int min(int a, int b) {
    int min = a; // 最初にaを最小値とする。これにより、初期値が設定される。
    if (a > b)
      min = b; // aがbより大きい場合、bを最小値とする。これにより、二つの整数の最小値が求まる。
    return min; // 最小値を返す。これにより、このメソッドを呼び出したコードは最小値を取得できる。
  }

  // 三つの整数の最小値を求めるためのメソッド。これにより、三つの整数の比較が容易になる。
  static int min(int a, int b, int c) {
    int min = a; // 最初にaを最小値とする。これにより、初期値が設定される。
    if (b < min)
      min = b; // bが現在の最小値より小さい場合、bを最小値とする。これにより、aとbの最小値が求まる。
    if (c < min)
      min = c; // cが現在の最小値より小さい場合、cを最小値とする。これにより、a、b、cの最小値が求まる。
    return min; // 最小値を返す。これにより、このメソッドを呼び出したコードは最小値を取得できる。
  }

  // 配列の最小値を求めるためのメソッド。これにより、配列の要素の比較が容易になる。
  static int min(int[] a) {
    int min = a[0]; // 最初に配列の最初の要素を最小値とする。これにより、初期値が設定される。
    for (int i = 1; i < a.length; i++) // 配列の全ての要素を順に調べる。これにより、配列の全ての要素を比較できる。
      if (a[i] < min)
        min = a[i]; // 現在の要素が現在の最小値より小さい場合、その要素を最小値とする。これにより、配列の最小値が求まる。
    return min; // 最小値を返す。これにより、このメソッドを呼び出したコードは最小値を取得できる。
  }

  public static void main(String[] args) {
    int a = 3;
    int b = 6; // 二つの整数を定義。これらは、最小値を求める対象となる。
    // 二値の最小値を求め、結果を出力する。これにより、二つの整数の最小値を確認できる。
    System.out.println("x, yの最小値は" + min(a, b) + "です。");
    int x = 1;
    int y = 0;
    int z = -1; // 三つの整数を定義。これらは、最小値を求める対象となる。
    // 三値の最小値を求め、結果を出力する。これにより、三つの整数の最小値を確認できる。
    System.out.println("x, y, zの最小値は" + min(x, y, z) + "です。");
    int[] array = { 2, 4, 6, 8, 0 }; // 配列を定義。これは、最小値を求める対象となる。
    // 配列の最小値を求め、結果を出力する。これにより、配列の最小値を確認できる。
    System.out.println("配列arrayの最小値は" + min(array) + "です。");
  }
}
