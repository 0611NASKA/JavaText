package Text.Chap07;

import java.util.Scanner;

public class Exercise7_33 {
  // 1次元配列の全要素を表示するためのメソッド。これにより、配列の内容を一目で確認できる。
  static void printArray(int[] a) {
    for (int i = 0; i < a.length; i++) // 配列の全ての要素を順に調べる。これにより、配列の全ての要素を表示できる。
      System.out.print(a[i] + " "); // 各要素を出力。これにより、配列の内容が一行に表示される。
    System.out.println(); // 配列の表示が終わったことを示すための改行。
  }

  // 2次元配列の最大値を求めるためのメソッド。これにより、2次元配列の要素の比較が容易になる。
  static int max(int[][] a) {
    int max = a[0][0]; // 最初に配列の最初の要素を最大値とする。これにより、初期値が設定される。
    for (int i = 0; i < a.length; i++) { // 配列の全ての行を順に調べる。これにより、配列の全ての行を確認できる。
      for (int j = 0; j < a[i].length; j++) { // 各行の全ての要素を順に調べる。これにより、各行の全ての要素を確認できる。
        if (a[i][j] > max)
          max = a[i][j]; // 現在の要素が現在の最大値より大きい場合、その要素を最大値とする。これにより、配列の最大値が求まる。
      }
    }
    return max; // 最大値を返す。これにより、このメソッドを呼び出したコードは最大値を取得できる。
  }

  // 2次元配列の全要素を表示するためのメソッド。これにより、2次元配列の内容を一目で確認できる。
  static void printArray(int[][] a) {
    int t = max(a); // 配列の最大値を求める。これにより、表示のフォーマットを決定するための基準値が得られる。
    int s = 2; // 表示のフォーマットを決定するための変数。これにより、表示の幅を調整できる。
    do {
      t /= 10; // 最大値を10で割る。これにより、最大値の桁数を求めることができる。
      s++; // 表示の幅を増やす。これにより、表示のフォーマットが調整される。
    } while (t > 10); // 最大値が1桁になるまで繰り返す。これにより、最大値の桁数を正確に求めることができる。
    String ds = "%" + s + "d"; // 表示のフォーマットを設定する。これにより、表示の幅が一定になる。
    for (int i = 0; i < a.length; i++) { // 配列の全ての行を順に調べる。これにより、配列の全ての行を確認できる。
      for (int j = 0; j < a[i].length; j++) { // 各行の全ての要素を順に調べる。これにより、各行の全ての要素を確認できる。
        System.out.printf(ds, a[i][j]); // 各要素を指定したフォーマットで出力する。これにより、配列の内容が整形されて表示される。
      }
      System.out.println(); // 配列の各行を改行する。これにより、2次元配列が行列の形で出力される。
    }
  }

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in); // ユーザーからの入力を受け取るためのScannerオブジェクトを作成。

    // 1次元配列の入力を受け取る
    System.out.print("1次元配列の要素数を入力してください: "); // ユーザーに1次元配列の要素数の入力を促す。
    int n = scanner.nextInt(); // ユーザーから入力された要素数を取得。
    int[] x = new int[n]; // 入力された要素数で1次元配列を作成。
    System.out.println("1次元配列の要素を入力してください:"); // ユーザーに1次元配列の要素の入力を促す。
    for (int i = 0; i < n; i++) {
      x[i] = scanner.nextInt(); // ユーザーから入力された各要素を配列に格納。
    }
    printArray(x); // 配列xの全要素を表示する。これにより、ユーザーが正しく入力したことを確認できる。

    // 2次元配列の入力を受け取る
    System.out.print("2次元配列の行数を入力してください: "); // ユーザーに2次元配列の行数の入力を促す。
    int rows = scanner.nextInt(); // ユーザーから入力された行数を取得。
    int[][] x2 = new int[rows][]; // 入力された行数で2次元配列を作成。
    for (int i = 0; i < rows; i++) {
      System.out.print("行" + (i + 1) + "の列数を入力してください: "); // ユーザーに各行の列数の入力を促す。
      int cols = scanner.nextInt(); // ユーザーから入力された列数を取得。
      x2[i] = new int[cols]; // 入力された列数で各行の配列を作成。
      System.out.println("行" + (i + 1) + "の要素を入力してください:"); // ユーザーに各行の要素の入力を促す。
      for (int j = 0; j < cols; j++) {
        x2[i][j] = scanner.nextInt(); // ユーザーから入力された各要素を配列に格納。
      }
    }
    printArray(x2); // 配列x2の全要素を表示する。これにより、ユーザーが正しく入力したことを確認できる。

    scanner.close(); // Scannerオブジェクトを閉じる。これにより、リソースのリークを防ぐ。
  }

}
