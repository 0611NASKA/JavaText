package Text.Chap08;

class Car {
  // フィールド
  private String name; // 車の名前を保持するためのフィールド。これにより、各Carオブジェクトは名前を持つことができる。
  private int width; // 車の幅を保持するためのフィールド。これにより、各Carオブジェクトは幅を持つことができる。
  private int height; // 車の高さを保持するためのフィールド。これにより、各Carオブジェクトは高さを持つことができる。
  private int length; // 車の長さを保持するためのフィールド。これにより、各Carオブジェクトは長さを持つことができる。
  private double x; // 車の現在位置のx座標を保持するためのフィールド。これにより、各Carオブジェクトは位置を持つことができる。
  private double y; // 車の現在位置のy座標を保持するためのフィールド。これにより、各Carオブジェクトは位置を持つことができる。
  private double fuel; // 車の残り燃料を保持するためのフィールド。これにより、各Carオブジェクトは燃料の量を持つことができる。
  private double economy; // 車の燃費を保持するためのフィールド。これにより、各Carオブジェクトは燃費を持つことができる。

  // コンストラクタ
  Car(String name, int width, int height, int length, double fuel, double economy) { // Carオブジェクトを作成するためのコンストラクタ。これにより、名前、幅、高さ、長さ、燃料、燃費を指定してCarオブジェクトを作成できる。
    this.name = name; // 引数で受け取った名前をフィールドに設定。これにより、作成されるCarオブジェクトは指定された名前を持つ。
    this.width = width; // 引数で受け取った幅をフィールドに設定。これにより、作成されるCarオブジェクトは指定された幅を持つ。
    this.height = height; // 引数で受け取った高さをフィールドに設定。これにより、作成されるCarオブジェクトは指定された高さを持つ。
    this.length = length; // 引数で受け取った長さをフィールドに設定。これにより、作成されるCarオブジェクトは指定された長さを持つ。
    this.fuel = fuel; // 引数で受け取った燃料をフィールドに設定。これにより、作成されるCarオブジェクトは指定された燃料の量を持つ。
    this.economy = economy; // 引数で受け取った燃費をフィールドに設定。これにより、作成されるCarオブジェクトは指定された燃費を持つ。
    x = y = 0.0; // 初期位置を(0,0)に設定。これにより、新しく作成されるCarオブジェクトは初期位置を持つ。
  }

  // 各値の取得
  double getX() {
    return x;
  } // 現在位置のx座標を取得するためのメソッド。これにより、Carオブジェクトの現在位置を取得できる。

  double getY() {
    return y;
  } // 現在位置のy座標を取得するためのメソッド。これにより、Carオブジェクトの現在位置を取得できる。

  double getFuel() {
    return fuel;
  } // 残り燃料を取得するためのメソッド。これにより、Carオブジェクトの残り燃料を取得できる。

  // スペック表示
  void putSpec() { // Carオブジェクトのスペック（名前、幅、高さ、長さ、燃料、燃費）を表示するためのメソッド。これにより、Carオブジェクトのスペックを一度に表示できる。
    System.out.printf("名前：%s\n", name); // 名前を表示。これにより、Carオブジェクトの名前を確認できる。
    System.out.printf("車幅：%d mm\n", width); // 幅を表示。これにより、Carオブジェクトの幅を確認できる。
    System.out.printf("車高：%d mm\n", height); // 高さを表示。これにより、Carオブジェクトの高さを確認できる。
    System.out.printf("車長：%d mm\n", length); // 長さを表示。これにより、Carオブジェクトの長さを確認できる。
    System.out.printf("燃料：%f L\n", fuel); // 燃料を表示。これにより、Carオブジェクトの燃料の量を確認できる。
    System.out.printf("燃費：%f km/L\n", economy); // 燃費を表示。これにより、Carオブジェクトの燃費を確認できる。
  }

  // 移動判定
  boolean move(double dx, double dy) { // Carオブジェクトを指定された距離だけ移動させるためのメソッド。これにより、Carオブジェクトは移動することができる。
    boolean flag = true; // 移動が可能かどうかを示すフラグ。これにより、移動が可能かどうかを判定できる。
    double dist = Math.sqrt(dx * dx + dy * dy); // 移動距離を計算。これにより、移動に必要な燃料の量を計算できる。
    if ((dist / economy) > fuel) { // 移動に必要な燃料が残りの燃料より多い場合、移動できないと判断する。これにより、燃料が足りない場合の移動を防ぐことができる。
      flag = false;
    } else { // 移動に必要な燃料が残りの燃料より少ない場合、移動する。これにより、Carオブジェクトは指定された距離だけ移動することができる。
      fuel -= dist / economy; // 移動に使用した燃料を残りの燃料から引く。これにより、Carオブジェクトの残りの燃料が更新される。
      x += dx; // x座標を更新。これにより、Carオブジェクトの現在位置が更新される。
      y += dy; // y座標を更新。これにより、Carオブジェクトの現在位置が更新される。
    }
    return flag; // 移動が可能かどうかを示すフラグを返す。これにより、このメソッドを呼び出したコードは移動が可能かどうかを判断できる
  }

  // 給油
  void chargeFuel(double charge) { // Carオブジェクトに燃料を給油するためのメソッド。これにより、Carオブジェクトは燃料を補充することができる。
    fuel += charge; // 給油量を残りの燃料に加える。これにより、Carオブジェクトの残りの燃料が更新される。
  }
}
